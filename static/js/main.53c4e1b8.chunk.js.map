{"version":3,"sources":["Characters/characters.view.js","Characters/characters.js","App.js","serviceWorker.js","index.js"],"names":["MainContainer","styled","div","Wrapper","Name","Image","img","Next","button","Prev","PrevDis","NextDis","Loading","LoaderWrapper","Character","props","src","image","name","this","alt","Component","CharacterList","getToUsers","page","setState","isLoading","axios","get","then","data","characters","results","next","info","prev","state","isFirstPage","isLastPage","NextPage","currentPage","PrevPage","map","character","key","id","onClick","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.53c4e1b8.chunk.js","sourcesContent":["import styled from \"styled-components\";\n\nexport default {\n    MainContainer: styled.div`\n    padding:0;\n    margin:0;\n    width:100%;\n    height:500px;\n    text-align:center;\n    `,\n    Wrapper: styled.div`\n    width: 200px;\n    height: 150px;\n    display:inline-block;\n    text-align:center;\n    vertical-align:center;`,\n    Name: styled.div`\n    font-weight: 900;\n    margin-top:5px;\n    font-size:12px;\n    `,\n    Image: styled.img`\n    height:100px;\n    width:100px;\n    margin-top:10%;\n    border:none;\n    `,\n    Next: styled.button`\n    width:75px;\n    height:30px;\n    background-color:#0099CC;\n    `,\n    Prev: styled.button`\n    width:75px;\n    height:30px;\n    background-color:#0099CC;\n    `,\n    PrevDis: styled.button`\n    width:75px;\n    height:30px;\n    background-color:grey;\n    outline:none;\n    transform:none;\n    opacity:0.7;\n    `,\n    NextDis: styled.button`\n      width:75px;\n    height:30px;\n    background-color:grey;\n    opacity:0.7;\n    outline:none;\n    transform:none;\n    `,\n    Loading: styled.img`\n    width:250px;\n    height:250px;\n    `,\n    LoaderWrapper: styled.div`\n    width:100%;\n    height:600px;\n    text-align:center;\n    display:flex;\n    justify-content:center;\n    align-items:center;\n    `\n}","import React, {Component} from 'react';\nimport axios from 'axios';\nimport Style from \"./characters.view\";\n\nclass Character extends Component {\n    constructor(props){\n        super(props);  \n        this.src = this.props.image;\n        this.name = this.props.name;\n    }\n\n    render(){\n        return(\n            <Style.Wrapper>\n                <Style.Image src={this.src} alt=\"img\"/>\n                <Style.Name>{this.name}</Style.Name>\n            </Style.Wrapper>\n        )\n    }\n\n}\n\n\nclass CharacterList extends Component{\n    constructor(props){\n        super(props);\n        this.state ={ \n            characters: '',\n            next: \"\",\n            prev: \"\",\n            currentPage: 1,\n            isFirstPage: false,\n            isLastPage: false,\n            isLoading: true\n        }\n        this.getToUsers();\n        \n    }\n    getToUsers = (page) => {\n        this.setState({isLoading: true});\n        axios.get(page || `https://rickandmortyapi.com/api/character/`)\n        .then(({data}) => {\n            this.setState({isLoading: false});\n            this.setState({characters: data.results});\n            this.setState({next: data.info.next});\n            this.setState({prev: data.info.prev});\n            if(this.state.prev===\"\")\n            {\n            this.setState({isFirstPage: !this.state.isFirstPage});\n            }\n            else if(this.state.next===\"\")\n            {\n            this.setState({isLastPage: !this.state.isLastPage});\n            }\n        //   console.log(window.location.search);\n        })\n      }\n\n    NextPage = () =>{\n            this.getToUsers(this.state.next);\n            this.setState({currentPage: this.state.currentPage+1});\n            this.setState({isFirstPage: false});\n    }\n    PrevPage = () =>{\n            this.getToUsers(this.state.prev);\n            this.setState({currentPage: this.state.currentPage-1});\n            this.setState({isLastPage: false});\n    }\n      render() {\n        return(\n            \n    <div>\n        <div>\n         {  this.state.isLoading ? \n            <Style.LoaderWrapper><Style.Loading src=\"http://cdn.shopify.com/s/files/1/0257/6087/products/ff0a8f6d7a972a61ea919ce1ab3e3627.png?v=1557444693\" alt=\" \"/></Style.LoaderWrapper>\n            :\n        <div>\n          {this.state.characters ?  this.state.characters.map(character =>\n              <Character {...character} key = {character.id} />\n            ): ''\n        } \n        </div>\n         }\n        </div>\n        { this.state.isFirstPage ?\n        <div>\n             <Style.PrevDis>Prev</Style.PrevDis>\n             <Style.Next onClick={this.NextPage}>Next</Style.Next>\n        </div>\n        : this.state.isLastPage ? \n        <div>\n             <Style.Prev onClick={this.PrevPage}>Prev</Style.Prev>\n             <Style.NextDis>Next</Style.NextDis>\n        </div>\n        :\n        <div>\n             <Style.Prev onClick={this.PrevPage}>Prev</Style.Prev>\n             <Style.Next onClick={this.NextPage}>Next</Style.Next>\n        </div>\n        }\n          </div>\n\n        )\n      }\n    }\n    \nexport default CharacterList;\n\n","import React from 'react';\nimport CharacterList from \"./Characters/characters\"\nimport Style from \"./Characters/characters.view\";\n\nconst App =(props) =>{\n  return (\n    <Style.MainContainer >\n      <CharacterList/>\n    </Style.MainContainer>\n  )\n}\n\n\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}